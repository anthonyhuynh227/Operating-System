Question 1:
22        cpuid_print(); prints CPU info
23        e820_print(); prints physical memory table
Question 2:
0xffffffff801034b5 is the main() address, and GDB works with virtual addresses. This can be seen in how the address is super high, and we know that the kernel resides high in virtual memory.

Question 3:
It is very convenient for the kernel and user program to be in the same virtual address space. 

For one, during context switching from user to kernel, you do not have to switch the current page table before calling the kernel handler; if the kernel had its own address space, you would somehow have to switch page table register to access the kernel.

It also allows the kernel to call user process addresses directly. When the kernel is in control during the user process, it can directly use and manipulate user addresses since they belong to the same virtual address space. 

Question 4:
The malloc function allocates a dynamic number of bytes specified by the user. It allocates memory to the heap for the user, and if there is not enough memory then it will call sbrk() to have the kernel allocate memory for the process. However, kalloc allocates memory for everything used by the kernel or processes, including page tables, kernel data structures, process memory, etc. Kalloc also allocates a specific number, 4096 bytes, which is exactly one page size. Kalloc locks the physical memory before allocating it, since there could be multiple cores that are accessing memory at the same time. 

User printf takes in a file descriptor, and calls the write system call to that file descriptor. 

On the other hand, cprintf prints to the console kernel device. Cprintf locks the console before writing to it. Cprintf prints one character at a time to the console.

Question 5:
The first line of C code executed is  line 33 in trap.c, uint64_t addr;

Question 6:
A trap frame is 178 bytes.

Question 7:
The kernel functions called are shown in the following backtrace:
#0  sys_sleep () at kernel/sysproc.c:54
#1  0xffffffff8010501b in syscall () at kernel/syscall.c:170
#2  0xffffffff80105eb2 in trap (tf=0xffffffff8015df50)
    at kernel/trap.c:39
#3  0xffffffff8010615a in alltraps () at kernel/trapasm.S:20

Question 8:
We each spent about 15 hours on this lab.

Question 9:
We like the C programming part of the lab, because we get to see the low level implementation of an operating system. We also got to implement the file I/O operations (like read(), write(), etc), which allows us to see exactly what operating systems are doing for us in a user application.

We would have liked a clearer documentation of the codebase. For example, it would have been better if the documentation told us what functions were already implemented for us (such as namei(), readi(), etc). This would have saved us a lot of time in the implementation. Also, the specification could have been clearer for where to put the data structures for file structs and file descriptors. 
